mkdir work
$mkdir work
$ mkdir work
mkdir work
cd work
mkdir /work
R
?aggregate
barplot(totS,main="Transaction per salespeople", names.arg = "",xlab="Salespeople",ylab = "Amount")
library(DMwR)
data(sales)
head(sales)
summary(sales)
nlevels(sales$ID)
nlevels(sales$Prod)
length(which(is.na(sales$Quant)&is.na(sales$Val)))
sum(is.na(sales$Quant)&is.na(sales$Val))
table(sales$Insp)/nrow(sales)*100
totS<-table(sales$ID)
totP<-table(sales$Prod)
barplot(totS,main="Transaction per salespeople", names.arg = "",xlab="Salespeople",ylab = "Amount")
barplot(totP,main="Transation per product",names.arg = "",xlab="Products",ylab = "Amount")
?barplot
?aggregate
list(Prod)
Prod
sales$Uprice<-sales$Val/sales$Quant
summary(sales$Uprice)
attach(sales)
upp<-aggregate(Uprice,list(Prod),median,na.rm=T)
topP<-sapply(c(T,F),function(o) upp[order(upp[,2],decreasing=o)[1:5],1])
colnames(topP)<-c('Expensive','Cheap')
list(Prod)
View(Uprice)
upp
topP
tops<-sales[Prod%in%topP[1,],c("Prod","Uprice")]
tops$Prod<-factor(tops$Prod)
boxplot(Uprice~Prod,data=tops,ylab="Uprice",log="y")
levels(sales$Prod)
tops<-sales[Prod%in%topP[1,],c("Prod","Uprice")]
levels(tops$Prod)
vs<-aggregate(Val,list(ID),sum,na.rm=T)
scoresSs<-sapply(c(T,F),function(o) vs[order(vs$x,dreasing=o)[1:5]],1)
scoresSs<-sapply(c(T,F),function(o) vs[order(vs$x,dreasing=o)[1:5],1])
scoresSs<-sapply(c(T,F),function(o) vs[order(vs$x,decreasing=o)[1:5],1])
colnames(scoresSs)<-c('Most','Least')
scoresSs
colnames(vs)
sum(vs[order(vs$x,dreasing=T)[1:100],2])/sum(Val,na.rm = T)*100
sum(vs[order(vs$x,decreasing=T)[1:100],2])/sum(Val,na.rm = T)*100
sum(vs[order(vs$x,decreasing=F)[1:2000],2])/sum(Val,na.rm = T)*100
qs<-aggregate(Quant,list(Prod),sum,na.rm=T)
scoresPs<-sapply(c(T,F),function(o) qs[order(qs$x,dreasing=o)[1:5],1])
scoresPs<-sapply(c(T,F),function(o) qs[order(qs$x,decreasing=o)[1:5],1])
colnames(scoresPs)<-c('Most','Least')
scoresPs
sum(as.double(qs[order(qs$x,decreasing = T)[1:100],2]))/sum(as.double(Quant),na.rm = T)*100
sum(as.double(qs[order(qs$x,decreasing = F)[1:4000],2]))/sum(as.double(Quant),na.rm = T)*100
out<-tapply(Uprice,list(Prod=Prod),function(x) length(boxplot.stats(x)$out))
out[order(out,decreasing = T)[1:10]]
Prod
out[order(out,decreasing = T)[1:10]]
out<-tapply(Uprice,list(Prod),function(x) length(boxplot.stats(x)$out))
out[order(out,decreasing = T)[1:10]]
sum(out)
sum(out)/nrow(sales)*100
nas<-sales[which(is.na(Quant)&is.na(Val)),c("ID","Prod")]
propS<-100*table(nas$ID)/totS
propS[order(propS,decreasing = T)[1:10]]
head(table(nas$ID))
table(nas$ID)
propP<-100*table(nas$Prod)/totP
propP[order(propP,decreasing = T)[1:10]]
detach(sales)
sales<-sales[-which(is.na(sales$Quant)&is.na(sales$Val)),]
nnasQp<-tapply(sales$Quant,list(sales$Prod))
nnasQp<-tapply(sales$Quant,list(sales$Prod),function(x) sum(is.na(x)))
propNAsQp[order(propNAsQp,decreasing = T)[1:10]]
propNAsQp<-nnasQp/table(sales$Prod)
propNAsQp[order(propNAsQp,decreasing = T)[1:10]]
sales<-sales[!sales$Prod%in%c("p2442","p2443"),]
nlevels((sales$Prod))
nnasQs<-tapply(sales$Quant,list(sales$ID),function(x) sum(is.na(x)))
propNAsQs<-nnasQs/table(sales$ID)
propNAsQs[order(propNAsQs,decreasing = T)[1:10]]
nnasVp<-tapply(sales$Val,list(sales$Prod),function(x) sum(is.na(x)))
propsNAsVp<-nnasVp/table(sales$Prod)
propsNAsVp[order(propsNAsVp,decreasing = T)[1:10]]
tPrice<-tapply(sales[sales$Insp!="fraud","Uprice"],list(sales[sales$Insp!="fraud","Prod"]),median,na.rm=T)
noQuant<-which(is.na(sales$Quant))
sales[noQuant,'Quant']<-ceiling(sales[noQuant,'Val']/tPrice[sales[noQuant,'Prod']])
noVal<-which(is.na(sales$Val))
sales[noVal,'Val']<-sales[noVal,'Quant']*tPrice[sales[noVal,'Prod']]
sales$Uprice<-sales$Val/sales$Quant
save(sales,file="salesClean.Rdata")
attach(sales)
notF<-which(Insp!='fraud')
ms<-tapply(Uprice[notF],list(Prod=Prod[notF]),function(x){bp<-boxplot.stats(x)$stats c(median=bp[3],iqr=bp[4]-bp[2])})
ms<-tapply(Uprice[notF],list(Prod=Prod[notF]),function(x){ bp<-boxplot.stats(x)$stats c(median=bp[3],iqr=bp[4]-bp[2]) })
ms<-tapply(Uprice[notF],list(Prod=Prod[notF]),function(x){ bp<-boxplot.stats(x)$stats
c(median=bp[3],iqr=bp[4]-bp[2]) })
ms<-matrix(unlist(ms),length(ms),2,byrow=T,dimnames = list(names(ms),c('median','iqr')))
head(ms)
ms<-tapply(Uprice[notF],list(Prod=Prod[notF]),function(x){bp<-boxplot.stats(x)$stats
c(median=bp[3],iqr=bp[4]-bp[2]) })
head(ms)
?matrix
ms<-tapply(Uprice[notF],list(Prod=Prod[notF]),function(x){bp<-boxplot.stats(x)$stats
c(median=bp[3],iqr=bp[4]-bp[2]) })
length(ms)
nrow(unlist(ms))
length(unlist(ms))
?unlist
View(unlist(ms))
length(unlist(ms))
head(unlist(ms))
tail(unlist(ms))
tail(ms)
unlist(ms)[4548]
unlist(ms)[1]
unlist(ms)[9092]
names(unlist(ms))
View(names(unlist(ms)))
ms<-matrix(unlist(ms),length(ms),2,byrow=T,dimnames = list(names(ms),c('median','iqr')))
length(unlist(ms))
length(ms)
ms<-tapply(Uprice[notF],list(Prod=Prod[notF]),function(x){bp<-boxplot.stats(x)$stats
c(median=bp[3],iqr=bp[4]-bp[2]) })
length(unlist(ms))
length(ms)
head(names(unlist(ms)))
names(unlist(ms))[1:6]
length(names(unlist(ms))[1:6])
length(names(unlist(ms))[1:6000])
names(unlist(ms))[6000]
names(unlist(ms))[1]
names(unlist(ms))[2]
names(unlist(ms))[5000]
names(unlist(ms))[4000]
names(unlist(ms))[4600]
names(unlist(ms))[4800]
names(unlist(ms))[4900]
names(unlist(ms))[4880]
names(unlist(ms))[4890]
names(unlist(ms))[4882]
names(unlist(ms))[4884]
names(unlist(ms))[4883]
names(unlist(ms))[4881:4883]
names(unlist(ms))[4881:4884]
names(ms)[2441:2444]
ms[2441:2444]
par(mfrow=c(1,2))
ms<-matrix(unlist(ms),length(ms),2,byrow=T,dimnames = list(names(ms),c('median','iqr')))
plot(ms[,1],ms[,2],xlab = "Median",ylab="IQR",main = "")
plot(ms[1,],ms[,2],xlab="Median",ylab = "IQR",main = ",col="grey,log="xy")
plot(ms[1,],ms[,2],xlab="Median",ylab = "IQR",main = "",col="grey",log="xy")
plot(ms[,1],ms[,2],xlab="Median",ylab = "IQR",main = "",col="grey",log="xy")
?plot
smalls<-which(table(Prod)<20)
points(log(ms[smalls,1]),log(ms[smalls,2]),pch="+")
dms<-scale(ms)
smalls<-which(table(Prod)<20)
prods<-tapply(sales$Uprice,sales$Prod,list)
similar<-matrix(NA,length(smalls),7,dimnames = list(names(smalls),c("Simil","ks.stat","ks.p","medP","iqrP","medS","iqrS")))
m<-rpart(y1~.,data=x1)
library(rpart)
m<-rpart(y1~.,data=x1)
balance_data <- read.csv(file="trainData.csv")
test = read.csv(file="trainData.csv")
test_data = test[, -1]
test_label = test[, 1]
test = read.csv(file="testData.csv")
library(DMwR)
library(randomForest)
library(e1071)
library(rJava)
#library(RWeka)
library(rpart)
setwd("~/Documents/capstone/MALSAR")
balance_data <- read.csv(file="trainData.csv")
test = read.csv(file="testData.csv")
test_data = test[, -1]
test_label = test[, 1]
y1=as.numeric(balance_data[,1])
x1=balance_data[,-1]
m<-rpart(y1~.,data=x1)
pred=predict(m,test_data)
head(test_data)
head(test)
head(y1)
test_data = test[, c(-1, -2)]
test_label = test[, 2]
y1=as.numeric(balance_data[,2])
x1=balance_data[,c(-1, - 2)]
head(y1)
head(x1)
dim(x1)
m<-rpart(y1~.,data=x1)
pred=predict(m,test_data)
corr(cbind(pred,test_label))
help(corr)
??corr
corr = cor(cbind(pred,test_label))
head(pred)
(pred > 0.5)
corr = cor(cbind(pred > 0.5 ,test_label))
head(test_label)
head(as.numeric(pred > 0.5))
corr = cor(cbind(as.numeric(pred > 0.5) ,test_label))
corr = cor(cbind(as.numeric(pred >= 0.5) ,test_label))
PRcurve<-function(preds,trues,...){
require(ROCR,quietly = T)
pd<-prediction(preds,trues)
pf<-performance(pd,"prec","rec")
#rev:reverses a vector. cummax:obtains the cumulative maximum of a set of numbers
pf@y.values<-lapply(pf@y.values,function(x) rev(cummax(rev(x))))
plot(pf,...)
t = cor(cbind(as.numeric(preds >= 0.5) ,trues))[1]
legend('topright',as.character(round(t,4)) )
}
PRcurve(pred,test_label,main="regression tree")
head(pred)
help(legend)
PRcurve<-function(preds,trues,...){
require(ROCR,quietly = T)
pd<-prediction(preds,trues)
pf<-performance(pd,"prec","rec")
#rev:reverses a vector. cummax:obtains the cumulative maximum of a set of numbers
pf@y.values<-lapply(pf@y.values,function(x) rev(cummax(rev(x))))
plot(pf,...)
t = cor(cbind(as.numeric(preds >= 0.5) ,trues))[2]
legend('topright',c('Matthews: ',  as.character(round(t,4))) )
}
PRcurve(pred,test_label,main="regression tree")
help(plot)
PRcurve<-function(preds,trues,...){
require(ROCR,quietly = T)
pd<-prediction(preds,trues)
pf<-performance(pd,"prec","rec")
#rev:reverses a vector. cummax:obtains the cumulative maximum of a set of numbers
pf@y.values<-lapply(pf@y.values,function(x) rev(cummax(rev(x))))
plot(pf,xlim = c(0, 1), ylim = c(0,1))
t = cor(cbind(as.numeric(preds >= 0.5) ,trues))[2]
legend('topright',c('Matthews: ',  as.character(round(t,4))) )
}
PRcurve(pred,test_label,main="regression tree")
library(PRROC)
install.packages(‘PRROC’)
install.packages(PRROC)
install.packages("PRROC")
library(PRROC)
pr <- pr.curve( pred, test_label, curve = TRUE );
# plot curve
plot(pr);
pr <- pr.curve( test_label,pred, curve = TRUE );
# plot curve
plot(pr);
write.csv(cbind(pred, test_label), file = "regressionTreeResult.csv")
mtree <- ctree(y1~., data = x1)
help(ctree)
library(party)
mtree <- ctree(y1~., data = x1)
pred_tree = predict(mtree, test_data)
head(test_data)
dimension(test_data)
size(test_data)
col(test_data)
head(x1)
dim(test_data)
dim(x1)
pred_tree = predict(mtree, test_data)
levels(x1[:,1])
levels(x1[,1])
levels(test_data[,1])
levels(test_data[,1]) = levels(x1)
levels(test_data[,1]) <- levels(x1)
levels(test_data[,1]) <- levels(x1[, 1])
pred_tree = predict(mtree, test_data)
write.csv(cbind(pred_tree,test_label), file = "decisionTreeResult.csv")
